- table:
    schema: public
    name: AccountType
  is_enum: true
- table:
    schema: public
    name: ColorAspect
  array_relationships:
  - name: profiles
    using:
      foreign_key_constraint_on:
        column: color_mask
        table:
          schema: public
          name: profile
  select_permissions:
  - role: player
    permission:
      columns:
      - mask
      - name
      - description
      filter: {}
  - role: public
    permission:
      columns:
      - mask
      - description
      - name
      filter: {}
- table:
    schema: public
    name: ExplorerType
  configuration:
    custom_root_fields: {}
    custom_column_names:
      image_url: imageURL
  array_relationships:
  - name: profiles
    using:
      foreign_key_constraint_on:
        column: explorer_type_title
        table:
          schema: public
          name: profile
  select_permissions:
  - role: player
    permission:
      columns:
      - description
      - id
      - image_url
      - title
      filter: {}
  - role: public
    permission:
      columns:
      - id
      - description
      - image_url
      - title
      filter: {}
- table:
    schema: public
    name: GuildPosition
  is_enum: true
- table:
    schema: public
    name: GuildStatus
  is_enum: true
- table:
    schema: public
    name: GuildType
  is_enum: true
  array_relationships:
  - name: Guilds
    using:
      foreign_key_constraint_on:
        column: type
        table:
          schema: public
          name: guild
  select_permissions:
  - role: player
    permission:
      columns:
      - name
      filter: {}
  - role: public
    permission:
      columns:
      - name
      filter: {}
- table:
    schema: public
    name: PlayerRank
  is_enum: true
- table:
    schema: public
    name: PlayerRole
  select_permissions:
  - role: player
    permission:
      columns:
      - description
      - basic
      - label
      - role
      filter: {}
  - role: public
    permission:
      columns:
      - description
      - basic
      - label
      - role
      filter: {}
- table:
    schema: public
    name: QuestCompletionStatus
  is_enum: true
  array_relationships:
  - name: quest_completions
    using:
      foreign_key_constraint_on:
        column: status
        table:
          schema: public
          name: quest_completion
- table:
    schema: public
    name: QuestRepetition
  is_enum: true
  array_relationships:
  - name: quests
    using:
      foreign_key_constraint_on:
        column: repetition
        table:
          schema: public
          name: quest
- table:
    schema: public
    name: QuestStatus
  is_enum: true
  array_relationships:
  - name: quests
    using:
      foreign_key_constraint_on:
        column: status
        table:
          schema: public
          name: quest
- table:
    schema: public
    name: SkillCategory
  is_enum: true
- table:
    schema: public
    name: guild
  object_relationships:
  - name: GuildType
    using:
      foreign_key_constraint_on: type
  - name: metadata
    using:
      manual_configuration:
        remote_table:
          schema: public
          name: guild_metadata
        column_mapping:
          id: guild_id
  array_relationships:
  - name: guild_players
    using:
      foreign_key_constraint_on:
        column: guild_id
        table:
          schema: public
          name: guild_player
  - name: quests
    using:
      foreign_key_constraint_on:
        column: guild_id
        table:
          schema: public
          name: quest
  select_permissions:
  - role: player
    permission:
      columns:
      - description
      - discord_id
      - discord_invite_url
      - github_url
      - guildname
      - id
      - join_button_url
      - logo
      - membership_through_discord
      - moloch_address
      - name
      - position
      - status
      - twitter_url
      - type
      - website_url
      filter: {}
  - role: public
    permission:
      columns:
      - description
      - discord_id
      - discord_invite_url
      - github_url
      - guildname
      - id
      - join_button_url
      - logo
      - membership_through_discord
      - moloch_address
      - name
      - position
      - status
      - twitter_url
      - type
      - website_url
      filter: {}
  event_triggers:
  - name: syncDiscordGuildMembers
    definition:
      enable_manual: false
      update:
        columns:
        - membership_through_discord
        - discord_id
        - status
    retry_conf:
      num_retries: 0
      interval_sec: 10
      timeout_sec: 60
    webhook_from_env: TRIGGERS_ENDPOINT
- table:
    schema: public
    name: guild_metadata
  object_relationships:
  - name: guild
    using:
      foreign_key_constraint_on: guild_id
  - name: player
    using:
      foreign_key_constraint_on: creator_id
  remote_relationships:
  - definition:
      remote_field:
        getGuildDiscordRoles:
          arguments:
            guildDiscordId: $discord_id
      hasura_fields:
      - discord_id
      remote_schema: backend
    name: discordRoles
  select_permissions:
  - role: player
    permission:
      columns:
      - guild_id
      - discord_metadata
      - creator_id
      - discord_id
      filter:
        creator_id:
          _eq: X-Hasura-User-Id
- table:
    schema: public
    name: guild_player
  object_relationships:
  - name: Guild
    using:
      foreign_key_constraint_on: guild_id
  - name: Player
    using:
      foreign_key_constraint_on: player_id
  remote_relationships:
  - definition:
      remote_field:
        getDiscordServerMemberRoles:
          arguments:
            guildId: $guild_id
            playerId: $player_id
      hasura_fields:
      - guild_id
      - player_id
      remote_schema: backend
    name: discordRoles
  select_permissions:
  - role: player
    permission:
      columns:
      - guild_id
      - player_id
      filter: {}
  - role: public
    permission:
      columns:
      - guild_id
      - player_id
      filter: {}
- table:
    schema: public
    name: me
  configuration:
    custom_root_fields: {}
    custom_column_names:
      ethereum_address: ethereumAddress
  object_relationships:
  - name: player
    using:
      manual_configuration:
        remote_table:
          schema: public
          name: player
        column_mapping:
          id: id
  select_permissions:
  - role: player
    permission:
      columns:
      - id
      - username
      - ethereum_address
      filter:
        id:
          _eq: X-Hasura-User-Id
- table:
    schema: public
    name: player
  configuration:
    custom_root_fields: {}
    custom_column_names:
      ethereum_address: ethereumAddress
      discord_id: discordId
      updated_at: updatedAt
      season_xp: seasonXP
      created_at: createdAt
      total_xp: totalXP
      profile_layout: profileLayout
  object_relationships:
  - name: profile
    using:
      manual_configuration:
        remote_table:
          schema: public
          name: profile
        column_mapping:
          id: player_id
  array_relationships:
  - name: accounts
    using:
      foreign_key_constraint_on:
        column: player_id
        table:
          schema: public
          name: player_account
  - name: guilds
    using:
      foreign_key_constraint_on:
        column: player_id
        table:
          schema: public
          name: guild_player
  - name: quest_completions
    using:
      foreign_key_constraint_on:
        column: completed_by_player_id
        table:
          schema: public
          name: quest_completion
  - name: quests
    using:
      foreign_key_constraint_on:
        column: created_by_player_id
        table:
          schema: public
          name: quest
  - name: roles
    using:
      foreign_key_constraint_on:
        column: player_id
        table:
          schema: public
          name: player_role
  - name: skills
    using:
      foreign_key_constraint_on:
        column: player_id
        table:
          schema: public
          name: player_skill
  remote_relationships:
  - definition:
      remote_field:
        getDaoHausMemberships:
          arguments:
            memberAddress: $ethereum_address
      hasura_fields:
      - ethereum_address
      remote_schema: backend
    name: daohausMemberships
  - definition:
      remote_field:
        getBrightIdStatus:
          arguments:
            contextId: $id
      hasura_fields:
      - id
      remote_schema: backend
    name: brightid_status
  - definition:
      remote_field:
        getTokenBalances:
          arguments:
            address: $ethereum_address
      hasura_fields:
      - ethereum_address
      remote_schema: backend
    name: token_balances
  select_permissions:
  - role: player
    permission:
      columns:
      - created_at
      - ethereum_address
      - id
      - profile_layout
      - rank
      - role
      - season_xp
      - total_xp
      filter: {}
      allow_aggregations: true
  - role: public
    permission:
      columns:
      - ethereum_address
      - id
      - profile_layout
      - rank
      - role
      - season_xp
      - total_xp
      filter: {}
      allow_aggregations: true
  update_permissions:
  - role: player
    permission:
      columns:
      - profile_layout
      - role
      filter:
        id:
          _eq: X-Hasura-User-Id
      check: {}
      set:
        id: x-hasura-User-Id
  event_triggers:
  - name: cacheIDXProfile
    definition:
      enable_manual: true
      insert:
        columns: '*'
      update:
        columns:
        - ethereum_address
    retry_conf:
      num_retries: 0
      interval_sec: 10
      timeout_sec: 60
    webhook: '{{TRIGGERS_ENDPOINT}}'
  - name: playerRankUpdated
    definition:
      enable_manual: false
      update:
        columns:
        - rank
    retry_conf:
      num_retries: 0
      interval_sec: 10
      timeout_sec: 60
    webhook_from_env: TRIGGERS_ENDPOINT
- table:
    schema: public
    name: player_account
  configuration:
    custom_root_fields: {}
    custom_column_names:
      player_id: playerId
  object_relationships:
  - name: Player
    using:
      foreign_key_constraint_on: player_id
  select_permissions:
  - role: player
    permission:
      columns:
      - player_id
      - identifier
      - type
      filter: {}
  - role: public
    permission:
      columns:
      - player_id
      - identifier
      - type
      filter: {}
- table:
    schema: public
    name: player_role
  object_relationships:
  - name: PlayerRole
    using:
      foreign_key_constraint_on: role
  insert_permissions:
  - role: player
    permission:
      check:
        player_id:
          _eq: X-Hasura-User-Id
      set:
        player_id: x-hasura-User-Id
      columns:
      - rank
      - role
      backend_only: false
  select_permissions:
  - role: player
    permission:
      columns:
      - player_id
      - role
      - rank
      filter: {}
  - role: public
    permission:
      columns:
      - rank
      - role
      - player_id
      filter: {}
  update_permissions:
  - role: player
    permission:
      columns:
      - rank
      filter:
        player_id:
          _eq: X-Hasura-User-Id
      check: null
  delete_permissions:
  - role: player
    permission:
      filter:
        player_id:
          _eq: X-Hasura-User-Id
  event_triggers:
  - name: playerRoleChanged
    definition:
      enable_manual: false
      insert:
        columns: '*'
      delete:
        columns: '*'
    retry_conf:
      num_retries: 0
      interval_sec: 10
      timeout_sec: 60
    webhook_from_env: TRIGGERS_ENDPOINT
- table:
    schema: public
    name: player_skill
  object_relationships:
  - name: Skill
    using:
      foreign_key_constraint_on: skill_id
  insert_permissions:
  - role: player
    permission:
      check:
        player_id:
          _eq: X-Hasura-User-Id
      set:
        player_id: x-hasura-User-Id
      columns:
      - skill_id
      backend_only: false
  select_permissions:
  - role: player
    permission:
      columns:
      - player_id
      - skill_id
      filter: {}
      allow_aggregations: true
  - role: public
    permission:
      columns:
      - player_id
      - skill_id
      filter: {}
      allow_aggregations: true
  delete_permissions:
  - role: player
    permission:
      filter:
        player_id:
          _eq: X-Hasura-User-Id
- table:
    schema: public
    name: profile
  configuration:
    custom_root_fields: {}
    custom_column_names:
      profile_image_url: profileImageURL
      country_code: countryCode
      background_image_url: backgroundImageURL
      last_checked_at: lastCheckedAt
      banner_image_url: bannerImageURL
      color_mask: colorMask
      player_id: playerId
      time_zone: timeZone
      available_hours: availableHours
      explorer_type_title: explorerTypeTitle
  object_relationships:
  - name: colorAspect
    using:
      foreign_key_constraint_on: color_mask
  - name: explorerType
    using:
      foreign_key_constraint_on: explorer_type_title
  - name: player
    using:
      foreign_key_constraint_on: player_id
  select_permissions:
  - role: player
    permission:
      columns:
      - available_hours
      - background_image_url
      - banner_image_url
      - color_mask
      - country_code
      - description
      - emoji
      - explorer_type_title
      - gender
      - id
      - location
      - name
      - player_id
      - profile_image_url
      - pronouns
      - time_zone
      - username
      - website
      filter: {}
  - role: public
    permission:
      columns:
      - available_hours
      - background_image_url
      - banner_image_url
      - color_mask
      - country_code
      - description
      - emoji
      - explorer_type_title
      - gender
      - id
      - location
      - name
      - player_id
      - profile_image_url
      - pronouns
      - time_zone
      - username
      - website
      filter: {}
  update_permissions:
  - role: player
    permission:
      columns:
      - available_hours
      - background_image_url
      - banner_image_url
      - color_mask
      - country_code
      - description
      - emoji
      - gender
      - location
      - name
      - profile_image_url
      - pronouns
      - time_zone
      - username
      - website
      filter:
        player_id:
          _eq: X-Hasura-User-Id
      check: null
- table:
    schema: public
    name: quest
  configuration:
    custom_root_fields: {}
    custom_column_names:
      external_link: externalLink
      created_by_player_id: createdByPlayerId
      created_at: createdAt
      guild_id: guildId
  object_relationships:
  - name: guild
    using:
      foreign_key_constraint_on: guild_id
  - name: player
    using:
      foreign_key_constraint_on: created_by_player_id
  - name: QuestRepetition
    using:
      foreign_key_constraint_on: repetition
  - name: QuestStatus
    using:
      foreign_key_constraint_on: status
  array_relationships:
  - name: quest_completions
    using:
      foreign_key_constraint_on:
        column: quest_id
        table:
          schema: public
          name: quest_completion
  - name: quest_roles
    using:
      manual_configuration:
        remote_table:
          schema: public
          name: quest_role
        column_mapping:
          id: quest_id
  - name: quest_skills
    using:
      foreign_key_constraint_on:
        column: quest_id
        table:
          schema: public
          name: quest_skill
  select_permissions:
  - role: player
    permission:
      columns:
      - created_at
      - cooldown
      - description
      - external_link
      - repetition
      - status
      - title
      - created_by_player_id
      - guild_id
      - id
      filter: {}
      allow_aggregations: true
  - role: public
    permission:
      columns:
      - id
      - created_at
      - guild_id
      - created_by_player_id
      - title
      - description
      - external_link
      - cooldown
      - status
      - repetition
      filter: {}
      allow_aggregations: true
  update_permissions:
  - role: player
    permission:
      columns:
      - cooldown
      - description
      - external_link
      - guild_id
      - repetition
      - status
      - title
      filter:
        _and:
        - created_by_player_id:
            _eq: X-Hasura-User-Id
        - status:
            _eq: OPEN
      check:
        _or:
        - repetition:
            _ne: RECURRING
        - _and:
          - repetition:
              _eq: RECURRING
          - cooldown:
              _is_null: false
- table:
    schema: public
    name: quest_completion
  configuration:
    custom_root_fields: {}
    custom_column_names:
      quest_id: questId
      submission_link: submissionLink
      submission_text: submissionText
      completed_by_player_id: completedByPlayerId
      submitted_at: submittedAt
  object_relationships:
  - name: completed
    using:
      manual_configuration:
        remote_table:
          schema: public
          name: quest
        column_mapping:
          quest_id: id
  - name: player
    using:
      foreign_key_constraint_on: completed_by_player_id
  - name: quest
    using:
      foreign_key_constraint_on: quest_id
  - name: QuestCompletionStatus
    using:
      foreign_key_constraint_on: status
  select_permissions:
  - role: player
    permission:
      columns:
      - completed_by_player_id
      - id
      - quest_id
      - status
      - submission_link
      - submission_text
      - submitted_at
      filter: {}
  - role: public
    permission:
      columns:
      - completed_by_player_id
      - id
      - quest_id
      - status
      - submission_link
      - submission_text
      - submitted_at
      filter: {}
  update_permissions:
  - role: player
    permission:
      columns:
      - submission_link
      - submission_text
      filter:
        _and:
        - status:
            _eq: PENDING
        - completed_by_player_id:
            _eq: X-Hasura-User-Id
      check: null
- table:
    schema: public
    name: quest_role
  configuration:
    custom_root_fields: {}
    custom_column_names:
      quest_id: questId
  object_relationships:
  - name: PlayerRole
    using:
      foreign_key_constraint_on: role
  - name: quest
    using:
      foreign_key_constraint_on: quest_id
  insert_permissions:
  - role: player
    permission:
      check:
        quest:
          created_by_player_id:
            _eq: X-Hasura-User-Id
      columns:
      - rank
      - role
      - quest_id
      backend_only: false
  select_permissions:
  - role: player
    permission:
      columns:
      - quest_id
      - rank
      - role
      filter: {}
  - role: public
    permission:
      columns:
      - rank
      - role
      - quest_id
      filter: {}
  delete_permissions:
  - role: player
    permission:
      filter:
        quest:
          created_by_player_id:
            _eq: X-Hasura-User-Id
- table:
    schema: public
    name: quest_skill
  configuration:
    custom_root_fields: {}
    custom_column_names:
      quest_id: questId
      skill_id: skillId
  object_relationships:
  - name: quest
    using:
      foreign_key_constraint_on: quest_id
  - name: skill
    using:
      foreign_key_constraint_on: skill_id
  insert_permissions:
  - role: player
    permission:
      check:
        quest:
          created_by_player_id:
            _eq: X-Hasura-User-Id
      columns:
      - quest_id
      - skill_id
      backend_only: false
  select_permissions:
  - role: player
    permission:
      columns:
      - quest_id
      - skill_id
      filter: {}
  - role: public
    permission:
      columns:
      - quest_id
      - skill_id
      filter: {}
  delete_permissions:
  - role: player
    permission:
      filter:
        quest:
          created_by_player_id:
            _eq: X-Hasura-User-Id
- table:
    schema: public
    name: skill
  array_relationships:
  - name: Player_Skills
    using:
      foreign_key_constraint_on:
        column: skill_id
        table:
          schema: public
          name: player_skill
  - name: quest_skills
    using:
      foreign_key_constraint_on:
        column: skill_id
        table:
          schema: public
          name: quest_skill
  insert_permissions:
  - role: player
    permission:
      check: {}
      columns:
      - name
      backend_only: false
  select_permissions:
  - role: player
    permission:
      columns:
      - category
      - id
      - name
      filter: {}
      allow_aggregations: true
  - role: public
    permission:
      columns:
      - category
      - name
      - id
      filter: {}
      allow_aggregations: true
